// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planerve.App.Persistence.Contexts;

#nullable disable

namespace Planerve.App.Persistence.Migrations
{
    [DbContext(typeof(PlanerveDbContext))]
    partial class PlanerveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("admin_county")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("admin_district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("admin_ward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ccg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ced")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("eastings")
                        .HasColumnType("int");

                    b.Property<string>("european_electoral_region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("incode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("latitude")
                        .HasColumnType("real");

                    b.Property<float>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("lsoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("msoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nhs_ha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("northings")
                        .HasColumnType("int");

                    b.Property<string>("nuts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("parish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("parliamentary_constituency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("primary_care_trust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quality")
                        .HasColumnType("int");

                    b.Property<string>("region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationAddress");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.HasKey("Id");

                    b.ToTable("ApplicationData");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<int>("CompletedRequirementsCount")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalRequirementCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationDocument");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<int>("CompletedSectionCount")
                        .HasColumnType("int");

                    b.Property<bool>("FormSectionsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("FormTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSectionCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationForm");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("ApplicationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CalculatedFee")
                        .HasColumnType("bit");

                    b.Property<bool>("FormSectionsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("PlansAndDocsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<bool>("SubmittedToLocalAuthority")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ApplicationProgress");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationType");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("AccessLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CopyApplication")
                        .HasColumnType("bit");

                    b.Property<bool>("DownloadForm")
                        .HasColumnType("bit");

                    b.Property<bool>("EditForm")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadApplication")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadForm")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.Application", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "Data")
                        .WithOne("Application")
                        .HasForeignKey("Planerve.App.Domain.Entities.ApplicationEntities.Application", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationAddress", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "ApplicationData")
                        .WithOne("Address")
                        .HasForeignKey("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationData");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationDocument", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "ApplicationData")
                        .WithOne("Document")
                        .HasForeignKey("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationDocument", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationDocument+DocumentRequirement", "DocumentRequirements", b1 =>
                        {
                            b1.Property<Guid>("ApplicationDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationDocumentId", "Id");

                            b1.ToTable("DocumentRequirement");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationDocumentId");
                        });

                    b.Navigation("ApplicationData");

                    b.Navigation("DocumentRequirements");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationForm", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "ApplicationData")
                        .WithOne("Form")
                        .HasForeignKey("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationForm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationForm+FormSection", "FormSections", b1 =>
                        {
                            b1.Property<Guid>("ApplicationFormId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("SectionName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationFormId", "Id");

                            b1.ToTable("FormSection");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationFormId");

                            b1.OwnsMany("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationForm+FormField", "FormFields", b2 =>
                                {
                                    b2.Property<Guid>("FormSectionApplicationFormId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("FormSectionId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"), 1L, 1);

                                    b2.Property<string>("FieldName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("FieldType")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("FormSectionApplicationFormId", "FormSectionId", "Id");

                                    b2.ToTable("FormField");

                                    b2.WithOwner()
                                        .HasForeignKey("FormSectionApplicationFormId", "FormSectionId");
                                });

                            b1.Navigation("FormFields");
                        });

                    b.Navigation("ApplicationData");

                    b.Navigation("FormSections");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationProgress", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "ApplicationData")
                        .WithOne("Progress")
                        .HasForeignKey("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationProgress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationData");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationType", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "ApplicationData")
                        .WithOne("Type")
                        .HasForeignKey("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationType", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationType+ApplicationCategory", "Category", b1 =>
                        {
                            b1.Property<Guid>("ApplicationTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationTypeId");

                            b1.ToTable("ApplicationType");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationTypeId");
                        });

                    b.Navigation("ApplicationData");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationUser", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", "ApplicationData")
                        .WithMany("Users")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationData");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.ApplicationData", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Application");

                    b.Navigation("Document");

                    b.Navigation("Form");

                    b.Navigation("Progress");

                    b.Navigation("Type");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
