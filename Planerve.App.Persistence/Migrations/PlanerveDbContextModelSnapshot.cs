// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planerve.App.Persistence.Contexts;

#nullable disable

namespace Planerve.App.Persistence.Migrations
{
    [DbContext(typeof(PlanerveDbContext))]
    partial class PlanerveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.Application", b =>
                {
                    b.Property<Guid>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppCategory")
                        .HasColumnType("int");

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppType")
                        .HasColumnType("int");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PercentageComplete")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.Submission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FormType")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubmissionId");

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.AuthEntities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("PassHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PassSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeA", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdviceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorityMemberSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnershipCertificationSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParkingSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProposalSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteVisitSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreeAndHedgeSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormId");

                    b.HasIndex("AccessSectionId");

                    b.HasIndex("AdviceSectionId");

                    b.HasIndex("AgentSectionId");

                    b.HasIndex("ApplicantSectionId");

                    b.HasIndex("AuthorityMemberSectionId");

                    b.HasIndex("MaterialSectionId");

                    b.HasIndex("OwnershipCertificationSectionId");

                    b.HasIndex("ParkingSectionId");

                    b.HasIndex("ProposalSectionId");

                    b.HasIndex("SiteSectionId");

                    b.HasIndex("SiteVisitSectionId");

                    b.HasIndex("TreeAndHedgeSectionId");

                    b.ToTable("FormTypeA");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeB", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdviceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorityMemberSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BiodiversitySectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmploymentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExistingUseSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FloodRiskSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FloorSpaceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoulSewageSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HazardousSubstanceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IndustrialMachinerySectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OpeningHoursSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnershipCertificationSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParkingSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProposalSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResidentialUnitsSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteVisitSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TradeEffluentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreeAndHedgeSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WasteSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormId");

                    b.HasIndex("AccessSectionId");

                    b.HasIndex("AdviceSectionId");

                    b.HasIndex("AgentSectionId");

                    b.HasIndex("ApplicantSectionId");

                    b.HasIndex("AuthorityMemberSectionId");

                    b.HasIndex("BiodiversitySectionId");

                    b.HasIndex("EmploymentSectionId");

                    b.HasIndex("ExistingUseSectionId");

                    b.HasIndex("FloodRiskSectionId");

                    b.HasIndex("FloorSpaceSectionId");

                    b.HasIndex("FoulSewageSectionId");

                    b.HasIndex("HazardousSubstanceSectionId");

                    b.HasIndex("IndustrialMachinerySectionId");

                    b.HasIndex("MaterialSectionId");

                    b.HasIndex("OpeningHoursSectionId");

                    b.HasIndex("OwnershipCertificationSectionId");

                    b.HasIndex("ParkingSectionId");

                    b.HasIndex("ProposalSectionId");

                    b.HasIndex("ResidentialUnitsSectionId");

                    b.HasIndex("SiteSectionId");

                    b.HasIndex("SiteVisitSectionId");

                    b.HasIndex("TradeEffluentSectionId");

                    b.HasIndex("TreeAndHedgeSectionId");

                    b.HasIndex("WasteSectionId");

                    b.ToTable("FormTypeB");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeC", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdviceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionProposalSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DischargeConditionSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SiteSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteVisitSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormId");

                    b.HasIndex("AdviceSectionId");

                    b.HasIndex("AgentSectionId");

                    b.HasIndex("ApplicantSectionId");

                    b.HasIndex("ConditionProposalSectionId");

                    b.HasIndex("DischargeConditionSectionId");

                    b.HasIndex("SiteSectionId");

                    b.HasIndex("SiteVisitSectionId");

                    b.ToTable("FormTypeC");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeD", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdviceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorityMemberSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EligibilitySectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NonMaterialProposalSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NonMaterialSoughtSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SiteSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteVisitSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormId");

                    b.HasIndex("AdviceSectionId");

                    b.HasIndex("AgentSectionId");

                    b.HasIndex("ApplicantSectionId");

                    b.HasIndex("AuthorityMemberSectionId");

                    b.HasIndex("EligibilitySectionId");

                    b.HasIndex("NonMaterialProposalSectionId");

                    b.HasIndex("NonMaterialSoughtSectionId");

                    b.HasIndex("SiteSectionId");

                    b.HasIndex("SiteVisitSectionId");

                    b.ToTable("FormTypeD");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeE", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdviceSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionProposalSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnershipCertificationSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiteVisitSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VariationConditionSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormId");

                    b.HasIndex("AdviceSectionId");

                    b.HasIndex("AgentSectionId");

                    b.HasIndex("ApplicantSectionId");

                    b.HasIndex("ConditionProposalSectionId");

                    b.HasIndex("OwnershipCertificationSectionId");

                    b.HasIndex("SiteSectionId");

                    b.HasIndex("SiteVisitSectionId");

                    b.HasIndex("VariationConditionSectionId");

                    b.ToTable("FormTypeE");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.AccessSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AffectingRightOfWay")
                        .HasColumnType("bit");

                    b.Property<string>("DrawingReferenceNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewAlteredPedestrianAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("NewVehicleAccess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AccessSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.AdviceSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdviceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AdviceSought")
                        .HasColumnType("bit");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdviceSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.AgentSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgentSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ApplicantSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CopyFromSiteAddress")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgent")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicantSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.AuthorityMemberSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRelated")
                        .HasColumnType("bit");

                    b.Property<string>("RelatedInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthorityMemberSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.BiodiversitySection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DesignatedSite")
                        .HasColumnType("int");

                    b.Property<int>("FeaturesOfGeological")
                        .HasColumnType("int");

                    b.Property<int>("ProtectedSpecies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BiodiversitySection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ConditionProposalSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConditionNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DecisionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConditionProposalSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.DischargeConditionSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DischargePartOnly")
                        .HasColumnType("bit");

                    b.Property<string>("PartsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmittedInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DischargeConditionSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.EligibilitySection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasInterest")
                        .HasColumnType("bit");

                    b.Property<int>("OptionValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EligibilitySection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.EmploymentSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExistingFullTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExistingPartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExistingTotalFullTimeEquivalent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmploymentChanged")
                        .HasColumnType("bit");

                    b.Property<string>("ProposedFullTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposedPartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposedTotalFullTimeEquivalent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ExistingUnits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AffordableHomeOwnership")
                        .HasColumnType("bit");

                    b.Property<int>("FourBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<bool>("Market")
                        .HasColumnType("bit");

                    b.Property<int>("OneBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<int>("ProposedBedroomTotalMarket")
                        .HasColumnType("int");

                    b.Property<bool>("SelfBuildCustomBuild")
                        .HasColumnType("bit");

                    b.Property<bool>("SocialAffordableIntermediateRent")
                        .HasColumnType("bit");

                    b.Property<bool>("StarterHomes")
                        .HasColumnType("bit");

                    b.Property<int>("ThreeBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<int>("TwoBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<int>("UnknownBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExistingUnits");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ExistingUseSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentUseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVacant")
                        .HasColumnType("bit");

                    b.Property<bool>("LandToBeContaminated")
                        .HasColumnType("bit");

                    b.Property<string>("LastUseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PartLandToBeContaminated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UseEnded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseSusceptibleToContamination")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ExistingUseSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.FloodRiskSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ExistingWaterCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("IncreaseFloodRisk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFloodRisk")
                        .HasColumnType("bit");

                    b.Property<bool>("MainSewer")
                        .HasColumnType("bit");

                    b.Property<bool>("PondLake")
                        .HasColumnType("bit");

                    b.Property<bool>("ProximityOfWatercourse")
                        .HasColumnType("bit");

                    b.Property<bool>("Soakaway")
                        .HasColumnType("bit");

                    b.Property<bool>("SustainableDrainage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FloodRiskSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.FloorSpaceSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoesIncludeGainOrLoss")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FloorSpaceSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.FoulSewageSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CessPit")
                        .HasColumnType("bit");

                    b.Property<bool>("ConnectingToExistingDrainage")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentReferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MainsSewer")
                        .HasColumnType("bit");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PackageTreatmentPlant")
                        .HasColumnType("bit");

                    b.Property<bool>("SepticTank")
                        .HasColumnType("bit");

                    b.Property<bool>("Unknown")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FoulSewageSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.HazardousSubstanceSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InvolvesHazardousSubstances")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("HazardousSubstanceSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.IndustrialMachinerySection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoesInvolveIndustrialCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProposalWasteManagementDevelopment")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessesAndProducts")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IndustrialMachinerySection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.MaterialSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AdditionalInformation")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MaterialsRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MaterialSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.NonMaterialProposalSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DecisionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OriginalApplicationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalDevelopmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NonMaterialProposalSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.NonMaterialSoughtSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewDrawingNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldDrawingNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubstitutePlans")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NonMaterialSoughtSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.OpeningHoursSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OpeningHoursSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.OwnershipCertificationSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GiveAppropriateNotice")
                        .HasColumnType("bit");

                    b.Property<bool>("GiveSomeNotice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAgriculturalHolding")
                        .HasColumnType("bit");

                    b.Property<int>("SelectedCertificate")
                        .HasColumnType("int");

                    b.Property<bool>("SoleOwner")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OwnershipCertificationSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ParkingSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AffectingParking")
                        .HasColumnType("bit");

                    b.Property<string>("ParkingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParkingSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ProposalSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProposalSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ProposedUnits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AffordableHomeOwnership")
                        .HasColumnType("bit");

                    b.Property<int>("FourBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<bool>("Market")
                        .HasColumnType("bit");

                    b.Property<int>("OneBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<int>("ProposedBedroomTotalMarket")
                        .HasColumnType("int");

                    b.Property<bool>("SelfBuildCustomBuild")
                        .HasColumnType("bit");

                    b.Property<bool>("SocialAffordableIntermediateRent")
                        .HasColumnType("bit");

                    b.Property<bool>("StarterHomes")
                        .HasColumnType("bit");

                    b.Property<int>("ThreeBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<int>("TwoBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.Property<int>("UnknownBedroomProposedTotalMarket")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProposedUnits");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ResidentialUnitsSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoesIncludeGainOrLoss")
                        .HasColumnType("bit");

                    b.Property<int>("ExistingTotal")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExistingUnitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProposedTotal")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProposedUnitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalNetGainOrLoss")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExistingUnitsId");

                    b.HasIndex("ProposedUnitsId");

                    b.ToTable("ResidentialUnitsSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.SiteSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AutoPopulated")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Easting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Northing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteArea")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.SiteVisitSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentContactType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SiteVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteVisitSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.TradeEffluentSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DisposeTradeWaste")
                        .HasColumnType("bit");

                    b.Property<bool>("TradeWasteDescription")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TradeEffluentSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.TreeAndHedgeSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FallingTreeHedgeReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FallingTreesHedge")
                        .HasColumnType("bit");

                    b.Property<bool>("TreeHedgeRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("TreeHedgeRemovedReference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreeAndHedgeSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExistingUnitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FourPlusBedroom")
                        .HasColumnType("int");

                    b.Property<string>("HousingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OneBedroom")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProposedUnitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ThreeBedroom")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("TwoBedroom")
                        .HasColumnType("int");

                    b.Property<int>("Unknown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExistingUnitsId");

                    b.HasIndex("ProposedUnitsId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.VariationConditionSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeOrRemovalReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VariationConditionSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.WasteSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StoreCollectRecyclableWaste")
                        .HasColumnType("bit");

                    b.Property<string>("StoreCollectRecyclableWasteDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StoreCollectWaste")
                        .HasColumnType("bit");

                    b.Property<string>("StoreCollectWasteDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WasteSection");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.AuthEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.AuthEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planerve.App.Domain.Entities.AuthEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.AuthEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.ApplicationEntities.Application", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.ApplicationEntities.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeA", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AccessSection", "AccessSection")
                        .WithMany()
                        .HasForeignKey("AccessSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AdviceSection", "AdviceSection")
                        .WithMany()
                        .HasForeignKey("AdviceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AgentSection", "AgentSection")
                        .WithMany()
                        .HasForeignKey("AgentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ApplicantSection", "ApplicantSection")
                        .WithMany()
                        .HasForeignKey("ApplicantSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AuthorityMemberSection", "AuthorityMemberSection")
                        .WithMany()
                        .HasForeignKey("AuthorityMemberSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.MaterialSection", "MaterialSection")
                        .WithMany()
                        .HasForeignKey("MaterialSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.OwnershipCertificationSection", "OwnershipCertificationSection")
                        .WithMany()
                        .HasForeignKey("OwnershipCertificationSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ParkingSection", "ParkingSection")
                        .WithMany()
                        .HasForeignKey("ParkingSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ProposalSection", "ProposalSection")
                        .WithMany()
                        .HasForeignKey("ProposalSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteSection", "SiteSection")
                        .WithMany()
                        .HasForeignKey("SiteSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteVisitSection", "SiteVisitSection")
                        .WithMany()
                        .HasForeignKey("SiteVisitSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.TreeAndHedgeSection", "TreeAndHedgeSection")
                        .WithMany()
                        .HasForeignKey("TreeAndHedgeSectionId");

                    b.Navigation("AccessSection");

                    b.Navigation("AdviceSection");

                    b.Navigation("AgentSection");

                    b.Navigation("ApplicantSection");

                    b.Navigation("AuthorityMemberSection");

                    b.Navigation("MaterialSection");

                    b.Navigation("OwnershipCertificationSection");

                    b.Navigation("ParkingSection");

                    b.Navigation("ProposalSection");

                    b.Navigation("SiteSection");

                    b.Navigation("SiteVisitSection");

                    b.Navigation("TreeAndHedgeSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeB", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AccessSection", "AccessSection")
                        .WithMany()
                        .HasForeignKey("AccessSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AdviceSection", "AdviceSection")
                        .WithMany()
                        .HasForeignKey("AdviceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AgentSection", "AgentSection")
                        .WithMany()
                        .HasForeignKey("AgentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ApplicantSection", "ApplicantSection")
                        .WithMany()
                        .HasForeignKey("ApplicantSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AuthorityMemberSection", "AuthorityMemberSection")
                        .WithMany()
                        .HasForeignKey("AuthorityMemberSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.BiodiversitySection", "BiodiversitySection")
                        .WithMany()
                        .HasForeignKey("BiodiversitySectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.EmploymentSection", "EmploymentSection")
                        .WithMany()
                        .HasForeignKey("EmploymentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ExistingUseSection", "ExistingUseSection")
                        .WithMany()
                        .HasForeignKey("ExistingUseSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.FloodRiskSection", "FloodRiskSection")
                        .WithMany()
                        .HasForeignKey("FloodRiskSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.FloorSpaceSection", "FloorSpaceSection")
                        .WithMany()
                        .HasForeignKey("FloorSpaceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.FoulSewageSection", "FoulSewageSection")
                        .WithMany()
                        .HasForeignKey("FoulSewageSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.HazardousSubstanceSection", "HazardousSubstanceSection")
                        .WithMany()
                        .HasForeignKey("HazardousSubstanceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.IndustrialMachinerySection", "IndustrialMachinerySection")
                        .WithMany()
                        .HasForeignKey("IndustrialMachinerySectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.MaterialSection", "MaterialSection")
                        .WithMany()
                        .HasForeignKey("MaterialSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.OpeningHoursSection", "OpeningHoursSection")
                        .WithMany()
                        .HasForeignKey("OpeningHoursSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.OwnershipCertificationSection", "OwnershipCertificationSection")
                        .WithMany()
                        .HasForeignKey("OwnershipCertificationSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ParkingSection", "ParkingSection")
                        .WithMany()
                        .HasForeignKey("ParkingSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ProposalSection", "ProposalSection")
                        .WithMany()
                        .HasForeignKey("ProposalSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ResidentialUnitsSection", "ResidentialUnitsSection")
                        .WithMany()
                        .HasForeignKey("ResidentialUnitsSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteSection", "SiteSection")
                        .WithMany()
                        .HasForeignKey("SiteSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteVisitSection", "SiteVisitSection")
                        .WithMany()
                        .HasForeignKey("SiteVisitSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.TradeEffluentSection", "TradeEffluentSection")
                        .WithMany()
                        .HasForeignKey("TradeEffluentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.TreeAndHedgeSection", "TreeAndHedgeSection")
                        .WithMany()
                        .HasForeignKey("TreeAndHedgeSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.WasteSection", "WasteSection")
                        .WithMany()
                        .HasForeignKey("WasteSectionId");

                    b.Navigation("AccessSection");

                    b.Navigation("AdviceSection");

                    b.Navigation("AgentSection");

                    b.Navigation("ApplicantSection");

                    b.Navigation("AuthorityMemberSection");

                    b.Navigation("BiodiversitySection");

                    b.Navigation("EmploymentSection");

                    b.Navigation("ExistingUseSection");

                    b.Navigation("FloodRiskSection");

                    b.Navigation("FloorSpaceSection");

                    b.Navigation("FoulSewageSection");

                    b.Navigation("HazardousSubstanceSection");

                    b.Navigation("IndustrialMachinerySection");

                    b.Navigation("MaterialSection");

                    b.Navigation("OpeningHoursSection");

                    b.Navigation("OwnershipCertificationSection");

                    b.Navigation("ParkingSection");

                    b.Navigation("ProposalSection");

                    b.Navigation("ResidentialUnitsSection");

                    b.Navigation("SiteSection");

                    b.Navigation("SiteVisitSection");

                    b.Navigation("TradeEffluentSection");

                    b.Navigation("TreeAndHedgeSection");

                    b.Navigation("WasteSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeC", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AdviceSection", "AdviceSection")
                        .WithMany()
                        .HasForeignKey("AdviceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AgentSection", "AgentSection")
                        .WithMany()
                        .HasForeignKey("AgentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ApplicantSection", "ApplicantSection")
                        .WithMany()
                        .HasForeignKey("ApplicantSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ConditionProposalSection", "ConditionProposalSection")
                        .WithMany()
                        .HasForeignKey("ConditionProposalSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.DischargeConditionSection", "DischargeConditionSection")
                        .WithMany()
                        .HasForeignKey("DischargeConditionSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteSection", "SiteSection")
                        .WithMany()
                        .HasForeignKey("SiteSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteVisitSection", "SiteVisitSection")
                        .WithMany()
                        .HasForeignKey("SiteVisitSectionId");

                    b.Navigation("AdviceSection");

                    b.Navigation("AgentSection");

                    b.Navigation("ApplicantSection");

                    b.Navigation("ConditionProposalSection");

                    b.Navigation("DischargeConditionSection");

                    b.Navigation("SiteSection");

                    b.Navigation("SiteVisitSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeD", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AdviceSection", "AdviceSection")
                        .WithMany()
                        .HasForeignKey("AdviceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AgentSection", "AgentSection")
                        .WithMany()
                        .HasForeignKey("AgentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ApplicantSection", "ApplicantSection")
                        .WithMany()
                        .HasForeignKey("ApplicantSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AuthorityMemberSection", "AuthorityMemberSection")
                        .WithMany()
                        .HasForeignKey("AuthorityMemberSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.EligibilitySection", "EligibilitySection")
                        .WithMany()
                        .HasForeignKey("EligibilitySectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.NonMaterialProposalSection", "NonMaterialProposalSection")
                        .WithMany()
                        .HasForeignKey("NonMaterialProposalSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.NonMaterialSoughtSection", "NonMaterialSoughtSection")
                        .WithMany()
                        .HasForeignKey("NonMaterialSoughtSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteSection", "SiteSection")
                        .WithMany()
                        .HasForeignKey("SiteSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteVisitSection", "SiteVisitSection")
                        .WithMany()
                        .HasForeignKey("SiteVisitSectionId");

                    b.Navigation("AdviceSection");

                    b.Navigation("AgentSection");

                    b.Navigation("ApplicantSection");

                    b.Navigation("AuthorityMemberSection");

                    b.Navigation("EligibilitySection");

                    b.Navigation("NonMaterialProposalSection");

                    b.Navigation("NonMaterialSoughtSection");

                    b.Navigation("SiteSection");

                    b.Navigation("SiteVisitSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.FormTypeE", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AdviceSection", "AdviceSection")
                        .WithMany()
                        .HasForeignKey("AdviceSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.AgentSection", "AgentSection")
                        .WithMany()
                        .HasForeignKey("AgentSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ApplicantSection", "ApplicantSection")
                        .WithMany()
                        .HasForeignKey("ApplicantSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ConditionProposalSection", "ConditionProposalSection")
                        .WithMany()
                        .HasForeignKey("ConditionProposalSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.OwnershipCertificationSection", "OwnershipCertificationSection")
                        .WithMany()
                        .HasForeignKey("OwnershipCertificationSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteSection", "SiteSection")
                        .WithMany()
                        .HasForeignKey("SiteSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.SiteVisitSection", "SiteVisitSection")
                        .WithMany()
                        .HasForeignKey("SiteVisitSectionId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.VariationConditionSection", "VariationConditionSection")
                        .WithMany()
                        .HasForeignKey("VariationConditionSectionId");

                    b.Navigation("AdviceSection");

                    b.Navigation("AgentSection");

                    b.Navigation("ApplicantSection");

                    b.Navigation("ConditionProposalSection");

                    b.Navigation("OwnershipCertificationSection");

                    b.Navigation("SiteSection");

                    b.Navigation("SiteVisitSection");

                    b.Navigation("VariationConditionSection");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.EligibilitySection", b =>
                {
                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.NotifiedPerson", "NotifiedPeople", b1 =>
                        {
                            b1.Property<Guid>("EligibilitySectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AddressLineOne")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLineThree")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLineTwo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("NoticeServed")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Postcode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EligibilitySectionId", "Id");

                            b1.ToTable("NotifiedPerson");

                            b1.WithOwner()
                                .HasForeignKey("EligibilitySectionId");
                        });

                    b.Navigation("NotifiedPeople");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.FloorSpaceSection", b =>
                {
                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.FloorSpace", "FloorSpaces", b1 =>
                        {
                            b1.Property<Guid>("FloorSpaceSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("ExistingGrossFloorspace")
                                .HasColumnType("int");

                            b1.Property<int>("GrossFloorspaceToBeLost")
                                .HasColumnType("int");

                            b1.Property<int>("NetAdditionalGrossFloorspace")
                                .HasColumnType("int");

                            b1.Property<int>("TotalGrossFloorspaceProposed")
                                .HasColumnType("int");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FloorSpaceSectionId", "Id");

                            b1.ToTable("FloorSpace");

                            b1.WithOwner()
                                .HasForeignKey("FloorSpaceSectionId");
                        });

                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.RoomInformation", "RoomInformations", b1 =>
                        {
                            b1.Property<Guid>("FloorSpaceSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("ExistingRoomsToBeLost")
                                .HasColumnType("int");

                            b1.Property<int>("NetAdditionalRooms")
                                .HasColumnType("int");

                            b1.Property<int>("TotalRoomsProposed")
                                .HasColumnType("int");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FloorSpaceSectionId", "Id");

                            b1.ToTable("RoomInformation");

                            b1.WithOwner()
                                .HasForeignKey("FloorSpaceSectionId");
                        });

                    b.Navigation("FloorSpaces");

                    b.Navigation("RoomInformations");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.HazardousSubstanceSection", b =>
                {
                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.Substance", "Substances", b1 =>
                        {
                            b1.Property<Guid>("HazardousSubstanceSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Amount")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HazardousSubstanceSectionId", "Id");

                            b1.ToTable("Substance");

                            b1.WithOwner()
                                .HasForeignKey("HazardousSubstanceSectionId");
                        });

                    b.Navigation("Substances");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.IndustrialMachinerySection", b =>
                {
                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.WasteManagementDetail", "WasteManagementDetails", b1 =>
                        {
                            b1.Property<Guid>("IndustrialMachinerySectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("MaxAnnualOperationalThroughput")
                                .HasColumnType("int");

                            b1.Property<string>("MaxAnnualOperationalThroughputVolumeUnit")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TotalVoidCapacity")
                                .HasColumnType("int");

                            b1.Property<string>("TotalVoidCapacityVolumeUnit")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WasteManagementType")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IndustrialMachinerySectionId", "Id");

                            b1.ToTable("WasteManagementDetail");

                            b1.WithOwner()
                                .HasForeignKey("IndustrialMachinerySectionId");
                        });

                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.WasteStreamDetail", "WasteStreamDetails", b1 =>
                        {
                            b1.Property<Guid>("IndustrialMachinerySectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("MaxAnnualOperationalThroughput")
                                .HasColumnType("int");

                            b1.Property<string>("MaxAnnualOperationalThroughputVolumeUnit")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WasteStreamType")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IndustrialMachinerySectionId", "Id");

                            b1.ToTable("WasteStreamDetail");

                            b1.WithOwner()
                                .HasForeignKey("IndustrialMachinerySectionId");
                        });

                    b.Navigation("WasteManagementDetails");

                    b.Navigation("WasteStreamDetails");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.MaterialSection", b =>
                {
                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.MaterialType", "MaterialTypes", b1 =>
                        {
                            b1.Property<Guid>("MaterialSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("ExistingMaterial")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProposedMaterial")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSectionId", "Id");

                            b1.ToTable("MaterialType");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSectionId");
                        });

                    b.Navigation("MaterialTypes");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.OpeningHoursSection", b =>
                {
                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.UseClass", "UseClasses", b1 =>
                        {
                            b1.Property<Guid>("OpeningHoursSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<bool>("IsKnown")
                                .HasColumnType("bit");

                            b1.Property<DateTimeOffset>("MtoFEnd")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("MtoFStart")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("SaturdayEnd")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("SaturdayStart")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("SpecialEnd")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("SpecialStart")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("OpeningHoursSectionId", "Id");

                            b1.ToTable("UseClass");

                            b1.WithOwner()
                                .HasForeignKey("OpeningHoursSectionId");
                        });

                    b.Navigation("UseClasses");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.OwnershipCertificationSection", b =>
                {
                    b.OwnsOne("Planerve.App.Domain.Entities.FormEntities.Shared.CertificateA", "CertificateA", b1 =>
                        {
                            b1.Property<Guid>("OwnershipCertificationSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DeclarationDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("DeclarationMade")
                                .HasColumnType("bit");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Role")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnershipCertificationSectionId");

                            b1.ToTable("OwnershipCertificationSection");

                            b1.WithOwner()
                                .HasForeignKey("OwnershipCertificationSectionId");
                        });

                    b.OwnsOne("Planerve.App.Domain.Entities.FormEntities.Shared.CertificateB", "CertificateB", b1 =>
                        {
                            b1.Property<Guid>("OwnershipCertificationSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CertificateBFK")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Certifies")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("DeclarationDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("DeclarationMade")
                                .HasColumnType("bit");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Role")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnershipCertificationSectionId");

                            b1.ToTable("OwnershipCertificationSection");

                            b1.WithOwner()
                                .HasForeignKey("OwnershipCertificationSectionId");
                        });

                    b.OwnsOne("Planerve.App.Domain.Entities.FormEntities.Shared.CertificateC", "CertificateC", b1 =>
                        {
                            b1.Property<Guid>("OwnershipCertificationSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CertificateCFK")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DeclarationDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("DeclarationMade")
                                .HasColumnType("bit");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("PublishedDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("PublishedInPaper")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Role")
                                .HasColumnType("int");

                            b1.Property<string>("StepsTakenDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnershipCertificationSectionId");

                            b1.ToTable("OwnershipCertificationSection");

                            b1.WithOwner()
                                .HasForeignKey("OwnershipCertificationSectionId");
                        });

                    b.OwnsOne("Planerve.App.Domain.Entities.FormEntities.Shared.CertificateD", "CertificateD", b1 =>
                        {
                            b1.Property<Guid>("OwnershipCertificationSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DeclarationDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("DeclarationMade")
                                .HasColumnType("bit");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("PublishedDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("PublishedInPaper")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Role")
                                .HasColumnType("int");

                            b1.Property<string>("StepsTaken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnershipCertificationSectionId");

                            b1.ToTable("OwnershipCertificationSection");

                            b1.WithOwner()
                                .HasForeignKey("OwnershipCertificationSectionId");
                        });

                    b.OwnsMany("Planerve.App.Domain.Entities.FormEntities.Shared.Person", "Persons", b1 =>
                        {
                            b1.Property<Guid>("OwnershipCertificationSectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("AddressLineOne")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLineThree")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLineTwo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("CertificateId")
                                .HasColumnType("int");

                            b1.Property<string>("HouseName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("NoticeServed")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Postcode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnershipCertificationSectionId", "Id");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("OwnershipCertificationSectionId");
                        });

                    b.Navigation("CertificateA");

                    b.Navigation("CertificateB");

                    b.Navigation("CertificateC");

                    b.Navigation("CertificateD");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ResidentialUnitsSection", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ExistingUnits", "ExistingUnits")
                        .WithMany()
                        .HasForeignKey("ExistingUnitsId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ProposedUnits", "ProposedUnits")
                        .WithMany()
                        .HasForeignKey("ProposedUnitsId");

                    b.Navigation("ExistingUnits");

                    b.Navigation("ProposedUnits");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.Type", b =>
                {
                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ExistingUnits", null)
                        .WithMany("Types")
                        .HasForeignKey("ExistingUnitsId");

                    b.HasOne("Planerve.App.Domain.Entities.FormEntities.Shared.ProposedUnits", null)
                        .WithMany("Types")
                        .HasForeignKey("ProposedUnitsId");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ExistingUnits", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Planerve.App.Domain.Entities.FormEntities.Shared.ProposedUnits", b =>
                {
                    b.Navigation("Types");
                });
#pragma warning restore 612, 618
        }
    }
}
